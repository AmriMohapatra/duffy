---
# Main tasks for the duffy role

- tags:
    - duffy
  block:
    - name: Import distro-specific variables
      include_vars: "{{ item }}"
      register: included_file
      failed_when: >-
        included_file.ansible_included_var_files | length > 0 and not included_file.ansible_facts
      loop:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
      tags:
        - vars

    - name: Install packages needed for Duffy
      package:
        name: "{{ duffy_dev_packages + duffy_python_packages | list }}"
        state: present
      tags:
        - packages

    - name: Create the duffy Unix user
      user:
        name: duffy
        home: /home/duffy
        generate_ssh_key: yes
        local: yes
      register: duffy_user
      tags:
        - users

    - name: Perform SELinux-related changes
      import_tasks: selinux.yml
      tags:
        - selinux

    - name: Install Duffy Python package
      pip:
        name: "duffy[app,tasks,postgresql,devshell,legacy,opennebula]"
        version: ">={{ duffy_minimum_version }}"
        virtualenv: "{{ duffy_virtualenv }}"
        virtualenv_command: "{{ duffy_python_executable }} -m venv"
      tags:
        - packages

    - become_user: duffy
      tags:
        - files
      block:
        - name: "Install ~/bin directory for the Duffy user"
          file:
            path: "/home/duffy/bin"
            state: directory
            mode: u=rwx,go=rx

        - name: Install the duffy command wrapper for the Duffy user
          template:
            src: "duffy.sh.j2"
            dest: "/home/duffy/bin/duffy"
            owner: duffy
            group: duffy
            follow: no
            mode: u=rwx,go=rx

    - become_user: postgres
      tags:
        - database
      block:
        - name: Create the duffy PostgreSQL user
          command: createuser duffy
          register: createuser_out
          changed_when: not createuser_out.failed
          failed_when: createuser_out.failed and "already exists" not in createuser_out.stderr

        - name: Create the duffy database
          command: createdb duffy -O duffy
          register: createdb_out
          changed_when: not createdb_out.failed
          failed_when: createdb_out.failed and "already exists" not in createdb_out.stderr

    - name: Create Duffy configuration directory
      file:
        path: /etc/duffy
        state: directory
      tags:
        - files

    - name: Create Duffy tasks schedule directory
      file:
        path: "{{ duffy_tasks_schedule_filename | dirname }}"
        state: directory
        owner: duffy
        group: duffy
      tags:
        - files

    - name: Install Duffy configuration files
      template:
        src: "config/{{ item }}.yaml.j2"
        dest: "/etc/duffy/{{ item }}.yaml"
        owner: root
        group: duffy
        mode: "u=rw,g=r,o={{ ('secret' in item) | ternary('', 'r') }}"
      loop: "{{ duffy_config_files }}"
      tags:
        - config
        - files

    - become_user: duffy
      tags:
        - database
      environment:
        PATH: "/home/duffy/bin:{{ ansible_env.PATH }}"
      block:
        - name: Set up Duffy database schema
          command: duffy setup-db
          register: duffy_setup_db_out
          changed_when: not duffy_setup_db_out.failed
          failed_when: >-
            duffy_setup_db_out.failed
            and "Refusing to change database schema" not in duffy_setup_db_out.stderr

        - name: Apply database schema migrations
          command: duffy migration upgrade
          register: duffy_migration_upgrade_out
          changed_when: >-
            not duffy_migration_upgrade_out.failed
            and "Upgraded to" in duffy_migration_upgrade_out.stdout

    - tags:
      - services
      block:
        - name: Install Duffy systemd services
          template:
            src: "systemd/{{ item }}.j2"
            dest: "/etc/systemd/system/{{ item }}"
          notify:
            - "Restart {{ item }}"
          register: install_systemd_services
          loop:
            - duffy-app.service
            - duffy-metaclient.service
            - duffy-tasks.service

        - name: Install shared systemd environment file
          template:
            src: systemd/duffy.sysconfig.j2
            dest: /etc/sysconfig/duffy
          notify:
            - Restart duffy-app.service
            - Restart duffy-metaclient.service
            - Restart duffy-tasks.service

        - name: Let systemd know about new units
          systemd:
            daemon_reload: yes
          when: install_systemd_services.changed

        - name: Enable Duffy systemd services
          systemd:
            name: "{{ item }}"
            enabled: yes
          loop:
            - duffy-app.service
            - duffy-metaclient.service
            - duffy-tasks.service

    - name: Ensure admin tenant exists and is configured properly
      become_user: duffy
      environment:
        PATH: "/home/duffy/bin:{{ ansible_env.PATH }}"
      tags:
        - admin-tenant
      block:
        - name: Check if admin tenant exists
          command: "duffy admin show-tenant {{ duffy_admin_tenant }}"
          register: admin_tenant_exists
          failed_when: False
          changed_when: admin_tenant_exists.rc == 0

        - name: Create admin tenant
          command:
            argv:
              - duffy
              - admin
              - create-tenant
              - --is-admin
              - "{{ duffy_admin_tenant }}"
              - "{{ duffy_admin_ssh_key }}"
          when: admin_tenant_exists.rc != 0

        - name: Set API key of admin tenant
          command: >-
            duffy admin update-tenant  {{ duffy_admin_tenant }} --api-key {{ duffy_admin_api_key }}
          when: >-
            admin_tenant_exists.rc != 0
            and duffy_admin_api_key != "please override this in production"
